#BlueJ class context
comment0.params=quantity\ maxValue\ type
comment0.target=Sorter(int,\ int,\ java.lang.String)
comment0.text=\r\n\ Constructor\ for\ sorter\r\n\ \r\n\ @param\ quantity\ the\ number\ of\ items\ to\ create\r\n\ @param\ maxValue\ the\ upperBound\ for\ the\ values\ of\ the\ items\r\n\ @param\ type\ default\ sort\ type\r\n\ @param\ gui\ GUI\ that\ methods\ update.\ Set\ to\ a\ GhostGUI\ if\ set\ to\ null\r\n\ @throws\ IllegalArgumentException\ if\ quantity\ or\ maxValue\ are\ invalid\ values\r\n
comment1.params=
comment1.target=double[]\ getValues()
comment1.text=\r\n\ returns\ values\ array\r\n\ \r\n\ @return\ valuess\ array\r\n
comment10.params=lowerBound\ midBound\ upperBound
comment10.target=void\ merge(int,\ int,\ int)
comment10.text=\r\n\ merge\ two\ sub-arrays\ of\ values\r\n\ \r\n\ @param\ lowerBound\ inclusive\r\n\ @param\ midBound\ exclusive\ for\ first\ sub-array,\ inclusive\ for\ second\ sub-array\r\n\ @param\ upperBoud\ exclusive\r\n
comment11.params=
comment11.target=void\ sort()
comment11.text=\r\n\ sorts\ the\ sorter\ object\ using\ the\ algorithm\ defined\ by\ type\ and\ updates\ the\ param\ gui's\ graphic\r\n
comment12.params=
comment12.target=void\ insertionSort()
comment12.text=\r\n\ Find\ out\ of\ place\ item,\ then\ insert\ it\ into\ correct\ position\r\n
comment13.params=
comment13.target=void\ bubbleSort()
comment13.text=\r\n\ Bubble\ Sort\ is\ the\ simplest\ sorting\ algorithm\ that\ works\ by\ repeatedly\ swapping\ the\ adjacent\ elements\ if\ they\ are\ in\ wrong\ order.\r\n
comment14.params=
comment14.target=void\ selectionSort()
comment14.text=\r\n\ The\ selection\ sort\ algorithm\ sorts\ an\ array\ by\ repeatedly\ finding\ the\ minimum\ element\ (considering\ ascending\ order)\ from\ unsorted\ part\ and\ putting\ it\ at\ the\ beginning.\r\n
comment15.params=
comment15.target=void\ cocktailSort()
comment15.text=\r\n\ Each\ iteration\ of\ the\ algorithm\ is\ broken\ up\ into\ 2\ stages\:\r\n\ \r\n\ The\ first\ stage\ loops\ through\ the\ array\ from\ left\ to\ right,\ just\ like\ the\ Bubble\ Sort.\ \r\n\ During\ the\ loop,\ adjacent\ items\ are\ compared\ and\ if\ value\ on\ the\ left\ is\ greater\ than\ the\ value\ on\ the\ right,\ then\ values\ are\ swapped.\ \r\n\ At\ the\ end\ of\ first\ iteration,\ largest\ number\ will\ reside\ at\ the\ end\ of\ the\ array.\r\n\ \r\n\ The\ second\ stage\ loops\ through\ the\ array\ in\ opposite\ direction-\ starting\ from\ the\ item\ just\ before\ the\ most\ recently\ sorted\ item,\ and\ moving\ back\ to\ the\ start\ of\ the\ array.\ \r\n\ Here\ also,\ adjacent\ items\ are\ compared\ and\ are\ swapped\ if\ required.\r\n
comment16.params=
comment16.target=void\ mergeSort()
comment17.params=lowerBound\ upperBound
comment17.target=void\ mergeSortHelper(int,\ int)
comment2.params=
comment2.target=int\ getQuantity()
comment2.text=\r\n\ returns\ number\ of\ values\ in\ values\ array\r\n\ \r\n\ @return\ number\ of\ values\ in\ values\ array\r\n
comment3.params=
comment3.target=int\ getMaxValue()
comment3.text=\r\n\ returns\ max\ value\ of\ the\ values\r\n\ \r\n\ @return\ max\ value\ of\ values\ in\ values\r\n
comment4.params=
comment4.target=boolean\ isValidType()
comment4.text=\r\n\ returns\ false\ if\ type\ is\ not\ valid\r\n\ \r\n\ @return\ false\ if\ type\ is\ not\ valid\r\n
comment5.params=
comment5.target=java.lang.String\ toString()
comment5.text=\r\n\ returns\ a\ String\ representation\ of\ the\ values\ array\ in\ the\ form\ of\ a\ String\ representation\ of\ each\ item\ followed\ by\ a\ new\ line\ character\ with\ the\ exception\ of\ the\ last\ item\r\n\ \r\n\ @return\ String\ representation\ of\ the\ values\ array\r\n
comment6.params=
comment6.target=void\ pause()
comment6.text=\r\n\ pauses\ a\ process\ for\ the\ amount\ of\ time\ specified\ by\ delay\r\n
comment7.params=gui
comment7.target=void\ setGUI(GUI)
comment7.text=\r\n\ Sets\ the\ active\ gui\r\n\ \r\n\ @param\ gui\ GUI\ to\ set\ the\ gui\ to\r\n
comment8.params=
comment8.target=void\ shuffle()
comment8.text=\r\n\ Shuffles\ values\ array\ using\ the\ Fisher-Yates\ algorithm\r\n
comment9.params=index\ newIndex
comment9.target=void\ move(int,\ int)
comment9.text=\r\n\ moves\ a\ value\ in\ the\ array\ from\ index\ to\ newIndex,\ objects\ as\ needed\r\n\ \r\n\ @param\ index\ index\ of\ value\ to\ move\r\n\ @param\ newIndex\ index\ to\ move\ value\ to\r\n\ @throws\ ArrayIndexOutOfBoundsException\ if\ either\ index\ or\ newIndex\ are\ invalid\ indexes\r\n
numComments=18
